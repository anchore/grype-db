package model

import (
	"encoding/json"
	"fmt"

	"github.com/anchore/grype-db/pkg/db"
)

const (
	VulnerabilityMetadataTableName = "vulnerability_metadata"
)

// VulnerabilityMetadataModel is a struct used to serialize db.VulnerabilityMetadata information into a sqlite3 DB.
type VulnerabilityMetadataModel struct {
	ID           string `gorm:"primary_key; column:id;"`
	Namespace    string `gorm:"primary_key; column:namespace;"`
	DataSource   string `gorm:"column:data_source"`
	RecordSource string `gorm:"column:record_source"`
	Severity     string `gorm:"column:severity"`
	URLs         string `gorm:"column:urls"`
	Description  string `gorm:"column:description"`
	Cvss         string `gorm:"column:cvss"`
}

// NewVulnerabilityMetadataModel generates a new model from a db.VulnerabilityMetadata struct.
func NewVulnerabilityMetadataModel(metadata db.VulnerabilityMetadata) VulnerabilityMetadataModel {
	links, err := json.Marshal(metadata.URLs)
	if err != nil {
		// TODO: just no
		panic(err)
	}

	if metadata.Cvss == nil {
		metadata.Cvss = make([]db.Cvss, 0)
	}
	var cvssStr string
	cvss, err := json.Marshal(metadata.Cvss)
	if err != nil {
		// TODO: just no
		panic(err)
	}

	cvssStr = string(cvss)

	return VulnerabilityMetadataModel{
		ID:           metadata.ID,
		Namespace:    metadata.Namespace,
		DataSource:   metadata.DataSource,
		RecordSource: metadata.RecordSource,
		Severity:     metadata.Severity,
		URLs:         string(links),
		Description:  metadata.Description,
		Cvss:         cvssStr,
	}
}

// TableName returns the table which all db.VulnerabilityMetadata model instances are stored into.
func (VulnerabilityMetadataModel) TableName() string {
	return VulnerabilityMetadataTableName
}

// Inflate generates a db.VulnerabilityMetadataModel object from the serialized model instance.
func (m *VulnerabilityMetadataModel) Inflate() (db.VulnerabilityMetadata, error) {
	var links []string
	var cvss []db.Cvss

	if err := json.Unmarshal([]byte(m.URLs), &links); err != nil {
		return db.VulnerabilityMetadata{}, fmt.Errorf("unable to unmarshal links (%+v): %w", m.URLs, err)
	}

	err := json.Unmarshal([]byte(m.Cvss), &cvss)
	if err != nil {
		return db.VulnerabilityMetadata{}, fmt.Errorf("unable to unmarshal cvss data (%+v): %w", m.Cvss, err)
	}

	return db.VulnerabilityMetadata{
		ID:           m.ID,
		Namespace:    m.Namespace,
		DataSource:   m.DataSource,
		RecordSource: m.RecordSource,
		Severity:     m.Severity,
		URLs:         links,
		Description:  m.Description,
		Cvss:         cvss,
	}, nil
}
