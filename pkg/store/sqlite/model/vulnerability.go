package model

import (
	"encoding/json"

	"github.com/anchore/siren-db/pkg/db"
)

const (
	VulnerabilityTableName    = "vulnerability"
	GetVulnerabilityIndexName = "get_vulnerability_index"
)

type VulnerabilityModel struct {
	ID                   string `gorm:"primary_key; column:id"`
	RecordSource         string `gorm:"primary_key; column:record_source"`
	PackageName          string `gorm:"column:package_name; index:get_vulnerability_index"`
	Namespace            string `gorm:"column:namespace; index:get_vulnerability_index"`
	VersionConstraint    string `gorm:"column:version_constraint"`
	VersionFormat        string `gorm:"column:version_format"`
	CPEs                 string `gorm:"column:cpes"`
	ProxyVulnerabilities string `gorm:"column:proxy_vulnerabilities"`
}

func NewVulnerabilityModel(vulnerability db.Vulnerability) VulnerabilityModel {
	cpes, err := json.Marshal(vulnerability.CPEs)
	if err != nil {
		// TODO: just no
		panic(err)
	}

	proxy, err := json.Marshal(vulnerability.ProxyVulnerabilities)
	if err != nil {
		// TODO: just no
		panic(err)
	}

	return VulnerabilityModel{
		ID:                   vulnerability.ID,
		PackageName:          vulnerability.PackageName,
		RecordSource:         vulnerability.RecordSource,
		Namespace:            vulnerability.Namespace,
		VersionConstraint:    vulnerability.VersionConstraint,
		VersionFormat:        vulnerability.VersionFormat,
		CPEs:                 string(cpes),
		ProxyVulnerabilities: string(proxy),
	}
}

func (VulnerabilityModel) TableName() string {
	return VulnerabilityTableName
}

func (m *VulnerabilityModel) Inflate() db.Vulnerability {
	var cpes []string
	err := json.Unmarshal([]byte(m.CPEs), &cpes)
	if err != nil {
		// TODO: just no
		panic(err)
	}

	var proxy []string
	err = json.Unmarshal([]byte(m.ProxyVulnerabilities), &proxy)
	if err != nil {
		// TODO: just no
		panic(err)
	}

	return db.Vulnerability{
		ID:                   m.ID,
		RecordSource:         m.RecordSource,
		PackageName:          m.PackageName,
		Namespace:            m.Namespace,
		VersionConstraint:    m.VersionConstraint,
		VersionFormat:        m.VersionFormat,
		CPEs:                 cpes,
		ProxyVulnerabilities: proxy,
	}
}
