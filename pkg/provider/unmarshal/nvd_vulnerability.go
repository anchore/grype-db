package unmarshal

import (
	"io"

	"github.com/anchore/grype-db/pkg/provider/unmarshal/nvd"
)

//type (
//	NVDVulnerability = nvd.CveItem
//)

type AdditonalEntryPackage struct {
	Identifier string            `json:"identifier"`
	Qualifiers map[string]string `json:"qualifiers"` // TODO: better type when I know more what we need
}

type VersionIdentifier struct {
	Constraint string `json:"version_constraint"` // TODO: snake case?
	Patched    string `json:"patched"`
	Type       string `json:"type"`
}

type AdditionalEntry struct {
	Package  AdditonalEntryPackage `json:"package"`
	Affected []VersionIdentifier   `json:"affected"`
}

type NVDVulnerability struct {
	nvd.CveItem
	AdditionalEntries []AdditionalEntry `json:"additionalEntries,omitempty"`
}

type NVDIntermediate struct {
	CVE               nvd.CveItem       `json:"cve"`
	AdditionalEntries []AdditionalEntry `json:"additionalEntries,omitempty"`
}

func (o NVDIntermediate) IsEmpty() bool {
	return o.CVE.ID == ""
}

// TODO: WILL: understand why this returns an nvd.Vulnerability instead of an unmarshal.NVDVulnerability
// I guess because it's wrapping a CVE item?
func NvdVulnerabilityEntries(reader io.Reader) ([]NVDIntermediate, error) {
	return unmarshalSingleOrMulti[NVDIntermediate](reader)
}
