package main

import (
	"slices"
	"strings"

	"golang.org/x/exp/maps"

	"github.com/anchore/grype-db/cmd/build-cve-set-lookup/termset"
)

var topTermCount = 1000

var skipTerms = termset.New(
	"of",
	"an",
	"a",
	"is",
	"for",
	"and",
	"with",
)

var keepTerms = termset.New(
	"php",
	"android",
	"java",
	"ibm",
	"github",
	"microsoft",
)

func removeHighFrequencyTerms(l lookups, topNumTerms int) lookups {
	termTotals := l.termTotals()

	// get terms sorted by frequency
	terms := maps.Keys(l.termsToProducts)
	slices.SortFunc(terms, func(a, b string) int {
		numA := termTotals[a]
		numB := termTotals[b]
		if numA == numB {
			return strings.Compare(a, b)
		}
		if numA > numB {
			return -1
		}
		return 1
	})

	removeTerms := termset.Set{}
	for _, term := range terms {
		//if keepTerms.Has(term) || isNumber(term) {
		//	continue
		//}

		for _, p := range l.termsToProducts[term] {
			// if the vendorProduct text has the term, keep it regardless of the frequency seen
			if p.cpeTerms.Has(term) {
				continue
			}
			l.removeProductTerm(p, term)
		}

		removeTerms.Add(term)
		topNumTerms--
		if topNumTerms <= 0 {
			break
		}
	}

	return l
}
