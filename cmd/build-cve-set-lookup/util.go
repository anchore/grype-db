package main

import (
	"fmt"
	"os"
	"regexp"
	"strings"
)

func mget[T any](o any, props ...string) T {
	for _, prop := range props {
		if m, ok := o.(map[string]any); ok {
			o = m[prop]
		}
	}
	out, _ := o.(T)
	return out
}

func log(msgs ...any) {
	if len(msgs) < 1 {
		return
	}
	msg, ok := msgs[0].(string)
	if ok && strings.Contains(msg, "%") {
		// use as format string
		msg = fmt.Sprintf(msg, msgs[1:])
	} else {
		msg = ""
		for _, m := range msgs {
			if len(msg) > 0 {
				msg += " "
			}
			msg += fmt.Sprintf("%v", m)
		}
	}
	_, _ = fmt.Fprintln(os.Stderr, msg)
}

// panget gets the value or panics on error, useful for (value, error) returns
func logget[T any](value T, err error) T {
	logif(err)
	return value
}

// panget gets the value or panics on error, useful for (value, error) returns
func panget[T any](value T, err error) T {
	panif(err)
	return value
}

// panif panics on error
func panif(err error) {
	if err != nil {
		panic(err)
	}
}

// logif logs if a non-nil error
func logif(err error) {
	if err != nil {
		log(err)
	}
}

var whitespace = regexp.MustCompile(`\s+`)

// var disallowedChars = regexp.MustCompile(`[^ ._\-();/<>\pL\pN]`)
var disallowedChars = regexp.MustCompile(`[^\pL\pN]+`)

//func cleanText(s string) string {
//	//s = whitespace.ReplaceAllString(s, " ")
//	s = disallowedChars.ReplaceAllString(s, " ")
//	//s = strings.ReplaceAll(s, "\\", " ")
//	s = strings.TrimSpace(s)
//	return s
//}

type mapa = map[string]any
