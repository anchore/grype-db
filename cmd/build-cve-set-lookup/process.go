package main

import (
	"fmt"

	"github.com/anchore/go-sync"
)

func process(executor sync.Executor, nvdDbFile, cveListDir string) lookups {
	var timer = newStopwatch()

	knownRecords := readCVEFiles(executor, cveListDir, "*/**/*.json")
	log("cve individual record count: %v took: %v", len(knownRecords), timer.lap())

	cveToVendorProduct := getNvdKnownCVEtoCPEs(nvdDbFile)
	log("read nvd cpe records db in %v", timer.lap())

	knownRecords = filterKnownRecordsToSingleCpe(cveToVendorProduct, knownRecords)
	log("filtered to single-cpe known records; count: %v took: %v", len(knownRecords), timer.lap())

	l := buildLookups(knownRecords)
	log("build lookups took:", timer.lap())

	return l
}

func filterKnownRecordsToSingleCpe(cveToVendorProduct map[string][]string, records []rec) []rec {
	var out []rec
	for _, r := range records {
		r, ok := filterKnownRecordToSingleCpe(cveToVendorProduct, r)
		if ok {
			out = append(out, r)
		}
	}
	return out
}

func filterKnownRecordToSingleCpe(cveToVendorProduct map[string][]string, r rec) (rec, bool) {
	switch r.cve {
	case "cve-2023-35926":
		fmt.Print()
	}

	if r.cpe != "" {
		// already set, use it
		return r, true
	}

	if len(cveToVendorProduct[r.cve]) != 1 {
		// none or too many values to know the right one
		return r, false
	}

	// exactly 1 record, use it
	r.cpe = cveToVendorProduct[r.cve][0]

	switch r.cpe {
	case "linuxfoundation:backstage:":
		fmt.Print()
	}

	return r, true
}
