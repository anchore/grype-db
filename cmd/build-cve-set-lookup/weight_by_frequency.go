package main

// weightByProductPercentage normalizes the word counts based on the total number of records for a product
func weightByProductPercentage(l lookups, factor float64) lookups {
	for _, p := range l.allProducts {
		numRecords := float64(len(p.cves))
		for term, weight := range p.weights {
			p.weights[term] = weight * (1 - factor + factor*p.terms[term]/numRecords)
		}
	}
	return l
}

// weightByOverallFrequency weights the terms based on percentage of the total term counts
func weightByOverallFrequency(l lookups, factor float64) lookups {
	termTotals := l.termTotals()
	for _, p := range l.allProducts {
		for term, weight := range p.weights {
			// pct has been normalized based on num records, but we need it in terms of the global number of terms
			p.weights[term] = weight * (1 - factor + factor*p.terms[term]/termTotals[term])
		}
	}
	return l
}
