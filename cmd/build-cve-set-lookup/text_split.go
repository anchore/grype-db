package main

import (
	"strings"

	"github.com/fatih/camelcase"

	"github.com/anchore/grype-db/cmd/build-cve-set-lookup/termset"
)

// processes the text, returning a searchable set of individual terms
func getTextTerms(t string) termset.Set {
	// split urls based on segments, e.g. github.com/org/repo will have distinct tokens
	t = urlPat.ReplaceAllStringFunc(t, func(s string) string {
		parts := urlSplitter.Split(t, -1)
		if !keepHosts.Has(parts[0]) {
			return ""
		}
		return strings.Join(parts, " ")
	})

	out := termset.Set{}

	for _, word := range whitespace.Split(t, -1) {
		if word == "" || isHashLike(word) {
			continue
		}

		out.Add(extractVariations(word)...)
		for _, part := range camelcase.Split(word) {
			out.Add(extractVariations(part)...)
		}
		for _, part := range disallowedChars.Split(word, -1) {
			out.Add(extractVariations(part)...)
		}
	}

	return out
}

func extractVariations(word string) []string {
	var out []string
	word = strings.ToLower(word)
	word = disallowedChars.ReplaceAllString(word, "")
	if word == "" {
		return nil
	}
	// each word we get like some.thing some-thing some_thing split into separate words "some thing" and combine to "something"
	out = append(out, word)
	out = append(out, disallowedChars.Split(word, -1)...)
	return out
}
