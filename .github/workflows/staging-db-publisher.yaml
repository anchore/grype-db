# Only manual kickoff of builds are allowed, with some required inputs. The
# staging DB builder allows publishing a database to an AWS bucket. This is
# useful when no official DB with a newer schema has been published. Once the
# database is published, you can point grype to it:
#
#  $ GRYPE_DB_UPDATE_URL=https://toolbox-data.anchore.io/grype/staging-databases/listing.json go run main.go centos:8
#
name: 'Staging DB Publisher'
on:
  workflow_dispatch:
    inputs:
      schema-version:
        description: 'the schema version to build (e.g. "3", NOT "v3").'
        required: true
        default: "5"
      grype-branch:
        description: 'the release version or branch of grype to use for verification of the built DB.'
        required: true
        default: "main"
      publish-databases:
        description: "build new databases and upload to S3"
        type: boolean
        required: true
        default: true
      publish-listing:
        description: "use S3 state to update and publish listing file"
        type: boolean
        required: true
      run-tmate:
        description: "start a tmate session (for debugging)"
        required: false
        type: boolean
        default: false
      tmate-duration:
        description: "tmate session duration"
        required: false
        default: 20

env:
  CGO_ENABLED: "0"
  # note: these GRYPE_* env vars are used by the python scripts
  GRYPE_DB_MANAGER_VALIDATE_LISTING_OVERRIDE_DB_SCHEMA_VERSION: ${{ github.event.inputs.schema-version }}
  GRYPE_DB_MANAGER_VALIDATE_LISTING_OVERRIDE_GRYPE_VERSION: ${{ github.event.inputs.grype-branch }}
  FORCE_COLOR: true

jobs:
  publish-staging-db:
    name: "Generate and publish staging DB"
    runs-on: ubuntu-22.04-4core-16gb
    # set the permissions granted to the github token to read the pull cache from ghcr.io
    permissions:
      packages: read
      contents: read
    steps:

      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 #v4.1.0
        with:
          submodules: true

      - name: Bootstrap environment
        uses: ./.github/actions/bootstrap

      - name: Login to ghcr.io
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | oras login ghcr.io --username ${{ github.actor }} --password-stdin

      - name: Setup tmate session
        # note about workflow dispatch inputs and booleans:
        # a) booleans come across as string types :(
        # b) if not using workflow_dispatch the default values are empty, which means we want these to effectively evaluate to true (so only check the negative case)
        if: github.event.inputs.run-tmate != 'false'
        uses: mxschmitt/action-tmate@a283f9441d2d96eb62436dc46d7014f5d357ac22 #v3.17
        timeout-minutes: ${{ fromJSON(github.event.inputs.tmate-duration) }}
        with:
          limit-access-to-actor: true

      - name: Pull vulnerability data
        # note about workflow dispatch inputs and booleans:
        # a) booleans come across as string types :(
        # b) if not using workflow_dispatch the default values are empty, which means we want these to effectively evaluate to true (so only check the negative case)
        if: github.event.inputs.publish-databases != 'false'
        run: make download-all-provider-cache

      - name: Generate and upload DB (schema ${{ github.event.inputs.schema-version }})
        # note about workflow dispatch inputs and booleans:
        # a) booleans come across as string types :(
        # b) if not using workflow_dispatch the default values are empty, which means we want these to effectively evaluate to true (so only check the negative case)
        if: github.event.inputs.publish-databases != 'false'
        run: |
          poetry run \
            grype-db-manager \
              -c ./config/grype-db-manager/publish-staging.yaml \
                db build-and-upload \
                  --schema-version ${{ github.event.inputs.schema-version }} \
                  -vvv
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TOOLBOX_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TOOLBOX_AWS_SECRET_ACCESS_KEY }}

      - name: Publish listing file
        # note about workflow dispatch inputs and booleans:
        # a) booleans come across as string types :(
        # b) if not using workflow_dispatch the default values are empty, which means we want these to effectively evaluate to true (so only check the negative case)
        if: github.event.inputs.publish-listing != 'false'
        run: |
          poetry run \
            grype-db-manager \
              -c ./config/grype-db-manager/publish-staging.yaml \
                listing update
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TOOLBOX_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TOOLBOX_AWS_SECRET_ACCESS_KEY }}
