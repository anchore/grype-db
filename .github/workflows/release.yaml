name: "Release"
on:
  workflow_dispatch:
    inputs:
      version:
        description: tag the latest commit on main with the given version (prefixed with v)
        required: true

jobs:

  quality-gate:
    environment: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Check if tag already exists
        # note: this will fail if the tag already exists
        run: |
          [[ "${{ github.event.inputs.version }}" == v* ]] || (echo "version '${{ github.event.inputs.version }}' does not have a 'v' prefix" && exit 1)
          git tag ${{ github.event.inputs.version }}

      - name: Check static analysis results
        uses: fountainhead/action-wait-for-check@v1.1.0
        id: static-analysis
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # This check name is defined as the github action job name (in .github/workflows/validation.yaml)
          checkName: "Static analysis"
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Check unit test results
        uses: fountainhead/action-wait-for-check@v1.1.0
        id: unit
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # This check name is defined as the github action job name (in .github/workflows/validation.yaml)
          checkName: "Unit tests"
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Check snapshot build results
        uses: fountainhead/action-wait-for-check@v1.1.0
        id: snapshot
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # This check name is defined as the github action job name (in .github/workflows/validation.yaml)
          checkName: "Build snapshot artifacts"
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Quality gate
        if: steps.static-analysis.outputs.conclusion != 'success' || steps.unit.outputs.conclusion != 'success' || steps.snapshot.outputs.conclusion != 'success'
        run: |
          echo "Static Analysis Status: ${{ steps.static-analysis.conclusion }}"
          echo "Unit Test Status: ${{ steps.unit.outputs.conclusion }}"
          echo "Build Snapshot Status: ${{ steps.snapshot.outputs.conclusion }}"
          false

  read-schema-versions:
    runs-on: ubuntu-20.04
    outputs:
      schema-versions: ${{ steps.read-schema-versions.outputs.schema-versions }}
    steps:

      - uses: actions/checkout@v2

      - name: Read supported schema versions
        id: read-schema-versions
        run: |
          content=`cat grype-schema-version-mapping.json | jq -c 'keys'`
          echo "::set-output name=schema-versions::$content"

  quality-gate-acceptance-test:
    needs: read-schema-versions
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        schema-version: ${{fromJson(needs.read-schema-versions.outputs.schema-versions)}}
    steps:

      - name: Check acceptance test results
        uses: fountainhead/action-wait-for-check@v1.1.0
        id: acceptance
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # This check name is defined as the github action job name (in .github/workflows/validation.yaml)
          checkName: "Acceptance tests (${{ matrix.schema-version }})"
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Quality gate
        if: steps.acceptance.outputs.conclusion != 'success'
        run: |
          echo "Acceptance Test Status: ${{ steps.acceptance.outputs.conclusion }}"
          false

  release:
    needs:
      - quality-gate
      - quality-gate-acceptance-test
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Bootstrap environment
        uses: ./.github/actions/bootstrap
        with:
          # use the same cache we used for building snapshots
          build-cache-key-prefix: "snapshot"
          python: false

      - name: Tag release
        run: |
          git tag ${{ github.event.inputs.version }}
          git push origin --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build release artifacts
        run: make ci-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
